---
/**
 * TransitionControls - User interface for transition preferences
 * 
 * This component provides:
 * - Transition intensity controls
 * - Performance monitoring display
 * - Accessibility preference toggles
 * - Debug mode controls
 */
---

<div class="transition-controls" id="transition-controls">
  <button 
    class="transition-controls-toggle" 
    id="transition-controls-toggle"
    aria-label="Toggle transition controls"
    aria-expanded="false"
  >
    ⚙️ Transitions
  </button>
  
  <div class="transition-controls-panel" id="transition-controls-panel" hidden>
    <h3>Transition Settings</h3>
    
    <div class="control-group">
      <label for="intensity-select">Intensity:</label>
      <select id="intensity-select" class="intensity-select">
        <option value="minimal">Minimal</option>
        <option value="reduced">Reduced</option>
        <option value="normal" selected>Normal</option>
        <option value="enhanced">Enhanced</option>
      </select>
    </div>
    
    <div class="control-group">
      <label class="checkbox-label">
        <input type="checkbox" id="respect-reduced-motion" checked>
        <span class="checkmark"></span>
        Respect reduced motion
      </label>
    </div>
    
    <div class="control-group">
      <label class="checkbox-label">
        <input type="checkbox" id="adapt-performance" checked>
        <span class="checkmark"></span>
        Adapt to performance
      </label>
    </div>
    
    <div class="control-group">
      <label for="custom-duration">Duration (ms):</label>
      <input 
        type="range" 
        id="custom-duration" 
        min="0" 
        max="1000" 
        step="50" 
        value="300"
        class="duration-slider"
      >
      <span class="duration-value">300ms</span>
    </div>
    
    <div class="control-group">
      <label class="checkbox-label">
        <input type="checkbox" id="sound-effects">
        <span class="checkmark"></span>
        Sound effects
      </label>
    </div>
    
    <div class="control-group">
      <label class="checkbox-label">
        <input type="checkbox" id="haptic-feedback">
        <span class="checkmark"></span>
        Haptic feedback
      </label>
    </div>
    
    <div class="control-group">
      <label class="checkbox-label">
        <input type="checkbox" id="debug-mode">
        <span class="checkmark"></span>
        Debug mode
      </label>
    </div>
    
    <div class="performance-display" id="performance-display">
      <h4>Performance</h4>
      <div class="metric">
        <span class="metric-label">FPS:</span>
        <span class="metric-value" id="fps-value">--</span>
      </div>
      <div class="metric">
        <span class="metric-label">Frame Time:</span>
        <span class="metric-value" id="frame-time-value">--</span>
      </div>
      <div class="metric">
        <span class="metric-label">Dropped Frames:</span>
        <span class="metric-value" id="dropped-frames-value">--</span>
      </div>
    </div>
    
    <div class="control-actions">
      <button id="reset-preferences" class="reset-button">
        Reset to Defaults
      </button>
    </div>
  </div>
</div>

<style>
  .transition-controls {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    font-family: system-ui, -apple-system, sans-serif;
  }
  
  .transition-controls-toggle {
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    backdrop-filter: blur(10px);
    transition: background-color 0.2s ease;
  }
  
  .transition-controls-toggle:hover {
    background: rgba(0, 0, 0, 0.9);
  }
  
  .transition-controls-panel {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 8px;
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 16px;
    min-width: 280px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    backdrop-filter: blur(10px);
  }
  
  .transition-controls-panel h3 {
    margin: 0 0 16px 0;
    font-size: 16px;
    font-weight: 600;
    color: #333;
  }
  
  .transition-controls-panel h4 {
    margin: 16px 0 8px 0;
    font-size: 14px;
    font-weight: 600;
    color: #555;
  }
  
  .control-group {
    margin-bottom: 12px;
  }
  
  .control-group label {
    display: block;
    font-size: 14px;
    font-weight: 500;
    color: #555;
    margin-bottom: 4px;
  }
  
  .intensity-select {
    width: 100%;
    padding: 6px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    background: white;
  }
  
  .checkbox-label {
    display: flex !important;
    align-items: center;
    cursor: pointer;
    margin-bottom: 0 !important;
  }
  
  .checkbox-label input[type="checkbox"] {
    margin-right: 8px;
  }
  
  .duration-slider {
    width: calc(100% - 60px);
    margin-right: 8px;
  }
  
  .duration-value {
    font-size: 12px;
    color: #666;
    font-weight: 500;
  }
  
  .performance-display {
    border-top: 1px solid #eee;
    padding-top: 12px;
    margin-top: 16px;
  }
  
  .metric {
    display: flex;
    justify-content: space-between;
    margin-bottom: 4px;
    font-size: 12px;
  }
  
  .metric-label {
    color: #666;
  }
  
  .metric-value {
    font-weight: 600;
    color: #333;
  }
  
  .control-actions {
    margin-top: 16px;
    padding-top: 12px;
    border-top: 1px solid #eee;
  }
  
  .reset-button {
    width: 100%;
    padding: 8px;
    background: #f5f5f5;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s ease;
  }
  
  .reset-button:hover {
    background: #e5e5e5;
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .transition-controls-panel {
      background: #2a2a2a;
      border-color: #444;
      color: #fff;
    }
    
    .transition-controls-panel h3,
    .transition-controls-panel h4 {
      color: #fff;
    }
    
    .control-group label {
      color: #ccc;
    }
    
    .intensity-select {
      background: #333;
      border-color: #555;
      color: #fff;
    }
    
    .metric-label {
      color: #aaa;
    }
    
    .metric-value {
      color: #fff;
    }
    
    .reset-button {
      background: #333;
      border-color: #555;
      color: #fff;
    }
    
    .reset-button:hover {
      background: #444;
    }
  }
  
  /* Hide controls in reduced motion mode by default */
  @media (prefers-reduced-motion: reduce) {
    .transition-controls {
      opacity: 0.7;
    }
  }
  
  /* Mobile responsive */
  @media (max-width: 768px) {
    .transition-controls {
      top: 10px;
      right: 10px;
    }
    
    .transition-controls-panel {
      min-width: 260px;
      right: -20px;
    }
  }
</style>

<script>
  // Import the transition preferences manager
  import { transitionPreferences } from '../utils/transitionPreferences';
  import { performanceMonitor } from '../utils/performanceMonitor';
  
  class TransitionControlsUI {
    private panel: HTMLElement;
    private toggle: HTMLElement;
    private isOpen: boolean = false;
    private performanceUpdateInterval: number | null = null;
    
    constructor() {
      this.panel = document.getElementById('transition-controls-panel')!;
      this.toggle = document.getElementById('transition-controls-toggle')!;
      this.initialize();
    }
    
    private initialize(): void {
      this.setupToggle();
      this.setupControls();
      this.loadCurrentPreferences();
      this.startPerformanceUpdates();
    }
    
    private setupToggle(): void {
      this.toggle.addEventListener('click', () => {
        this.togglePanel();
      });
      
      // Close panel when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.toggle.contains(e.target as Node) && 
            !this.panel.contains(e.target as Node)) {
          this.closePanel();
        }
      });
    }
    
    private setupControls(): void {
      // Intensity select
      const intensitySelect = document.getElementById('intensity-select') as HTMLSelectElement;
      intensitySelect.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        transitionPreferences.updatePreference('intensity', target.value as any);
      });
      
      // Checkboxes
      const checkboxes = [
        'respect-reduced-motion',
        'adapt-performance', 
        'sound-effects',
        'haptic-feedback',
        'debug-mode'
      ];
      
      checkboxes.forEach(id => {
        const checkbox = document.getElementById(id) as HTMLInputElement;
        checkbox.addEventListener('change', (e) => {
          const target = e.target as HTMLInputElement;
          const preference = this.getPreferenceKey(id);
          transitionPreferences.updatePreference(preference, target.checked);
        });
      });
      
      // Duration slider
      const durationSlider = document.getElementById('custom-duration') as HTMLInputElement;
      const durationValue = document.querySelector('.duration-value') as HTMLElement;
      
      durationSlider.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const value = parseInt(target.value);
        durationValue.textContent = `${value}ms`;
        transitionPreferences.updatePreference('customDuration', value || undefined);
      });
      
      // Reset button
      const resetButton = document.getElementById('reset-preferences') as HTMLButtonElement;
      resetButton.addEventListener('click', () => {
        transitionPreferences.resetPreferences();
        this.loadCurrentPreferences();
      });
    }
    
    private getPreferenceKey(id: string): keyof any {
      const mapping: Record<string, string> = {
        'respect-reduced-motion': 'respectReducedMotion',
        'adapt-performance': 'adaptToPerformance',
        'sound-effects': 'enableSoundEffects',
        'haptic-feedback': 'enableHapticFeedback',
        'debug-mode': 'debugMode'
      };
      return mapping[id] as keyof any;
    }
    
    private loadCurrentPreferences(): void {
      const preferences = transitionPreferences.getPreferences();
      
      // Update intensity select
      const intensitySelect = document.getElementById('intensity-select') as HTMLSelectElement;
      intensitySelect.value = preferences.intensity;
      
      // Update checkboxes
      (document.getElementById('respect-reduced-motion') as HTMLInputElement).checked = preferences.respectReducedMotion;
      (document.getElementById('adapt-performance') as HTMLInputElement).checked = preferences.adaptToPerformance;
      (document.getElementById('sound-effects') as HTMLInputElement).checked = preferences.enableSoundEffects;
      (document.getElementById('haptic-feedback') as HTMLInputElement).checked = preferences.enableHapticFeedback;
      (document.getElementById('debug-mode') as HTMLInputElement).checked = preferences.debugMode;
      
      // Update duration slider
      const durationSlider = document.getElementById('custom-duration') as HTMLInputElement;
      const durationValue = document.querySelector('.duration-value') as HTMLElement;
      const duration = preferences.customDuration || 300;
      durationSlider.value = duration.toString();
      durationValue.textContent = `${duration}ms`;
    }
    
    private startPerformanceUpdates(): void {
      this.performanceUpdateInterval = window.setInterval(() => {
        if (this.isOpen) {
          this.updatePerformanceDisplay();
        }
      }, 1000);
    }
    
    private updatePerformanceDisplay(): void {
      const metrics = performanceMonitor.getCurrentMetrics();
      
      const fpsValue = document.getElementById('fps-value')!;
      const frameTimeValue = document.getElementById('frame-time-value')!;
      const droppedFramesValue = document.getElementById('dropped-frames-value')!;
      
      fpsValue.textContent = metrics.frameRate.toString();
      frameTimeValue.textContent = `${metrics.averageFrameTime}ms`;
      droppedFramesValue.textContent = metrics.droppedFrames.toString();
      
      // Color code FPS based on performance
      if (metrics.frameRate >= 55) {
        fpsValue.style.color = '#22c55e'; // Green
      } else if (metrics.frameRate >= 30) {
        fpsValue.style.color = '#f59e0b'; // Yellow
      } else {
        fpsValue.style.color = '#ef4444'; // Red
      }
    }
    
    private togglePanel(): void {
      if (this.isOpen) {
        this.closePanel();
      } else {
        this.openPanel();
      }
    }
    
    private openPanel(): void {
      this.panel.hidden = false;
      this.toggle.setAttribute('aria-expanded', 'true');
      this.isOpen = true;
      this.updatePerformanceDisplay();
    }
    
    private closePanel(): void {
      this.panel.hidden = true;
      this.toggle.setAttribute('aria-expanded', 'false');
      this.isOpen = false;
    }
    
    public destroy(): void {
      if (this.performanceUpdateInterval) {
        clearInterval(this.performanceUpdateInterval);
      }
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new TransitionControlsUI();
    });
  } else {
    new TransitionControlsUI();
  }
</script>