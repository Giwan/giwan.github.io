---
import { formatArticlePublishedDate } from "../utils/helpers";
import type { IPost } from "../types/post";

const getPubDate = (post: string | any) =>
    new Date(post.frontmatter.pubDate || post.frontmatter.published).valueOf();

const allPosts = await Promise.all(Object.values(import.meta.glob("/src/pages/blog/**/*.{md,mdx}"))
    .map(async (item) => await item())
) as IPost[];

const filterFn = (post: IPost): boolean =>
    Boolean(post.frontmatter.pubDate || post.frontmatter.published);

const posts = allPosts
    .filter(filterFn)
    .sort((a, b) => getPubDate(b) - getPubDate(a));

const postsPerPage = 10;

const clientPosts = posts.map((post) => ({
    url: post.url,
    title: post.frontmatter.title,
    description: post.frontmatter.description,
    formattedDate: formatArticlePublishedDate(post),
}));
---

<main class="col-span-full">
    <ul id="articles-list" class="grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))] gap-8 mt-12 w-full [&>li:first-child]:md:col-span-2">
        {
            posts.slice(0, postsPerPage).map((post) => (
                <li class="border border-border p-4 rounded-lg bg-card md:h-[420px] overflow-hidden transition-colors hover:bg-muted/50 group article-item">
                    <a href={post.url} class="block h-full">
                        <h2 class="text-4xl md:text-5xl mb-1 font-heading font-extrabold text-primary group-hover:underline">{post.frontmatter.title}</h2>
                        <p class="text-muted-foreground mb-4 font-heading text-sm">{formatArticlePublishedDate(post)}</p>
                        <p class="text-foreground leading-7 text-lg">
                            {post.frontmatter.description}
                        </p>
                    </a>
                </li>
            ))
        }
    </ul>
    {posts.length > postsPerPage && (
        <div class="text-center mt-8">
            <button id="load-more-button" class="bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-lg">
                More
            </button>
        </div>
    )}
</main>

<script define:vars={{ posts: clientPosts, postsPerPage }}>
    let visiblePosts = postsPerPage;
    const articlesList = document.getElementById('articles-list');
    const loadMoreButton = document.getElementById('load-more-button');

    if (loadMoreButton) {
        loadMoreButton.addEventListener('click', () => {
            const currentPosts = visiblePosts;
            visiblePosts += postsPerPage;
            const nextPosts = posts.slice(currentPosts, visiblePosts);

            nextPosts.forEach(post => {
                const listItem = document.createElement('li');
                listItem.className = 'border border-border p-4 rounded-lg bg-card h-[420px] overflow-hidden transition-colors hover:bg-muted/50 group article-item';
                listItem.innerHTML = `
                    <a href="${post.url}" class="block h-full">
                        <h2 class="text-4xl leading-9 mb-1 font-heading font-extrabold text-primary group-hover:underline">${post.title}</h2>
                        <p class="text-muted-foreground mb-4 font-heading text-sm">${post.formattedDate}</p>
                        <p class="text-foreground leading-7 text-lg">
                            ${post.description}
                        </p>
                    </a>
                `;
                articlesList.appendChild(listItem);
            });

            if (visiblePosts >= posts.length) {
                loadMoreButton.style.display = 'none';
            }
        });
    }
</script>
